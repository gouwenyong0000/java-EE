
1. 数据流及其作用（了解）

DataOutputStream:可以将内存中的基本数据类型的变量、String类型的变量写出到具体的文件中。
DataInputStream:将文件中保存的数据还原为内存中的基本数据类型的变量、String类型的变量。


2. 对象流及其作用
2.1 API:
ObjectInputSteam
ObjectOutputStream

2.2 作用:
可以读写基本数据类型的变量、引用数据类型的变量。

3. 对象的序列化机制是什么
对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，
或通过网络将这种二进制流传输到另一个网络节点。//当其它程序获取了这种二进制流，就可以恢复成原来的Java对象。


4.如下两个过程使用的流：
序列化过程：使用ObjectOutputStream流实现。将内存中的Java对象保存在文件中或通过网络传输出去

反序列化过程：使用ObjectInputSteam流实现。将文件中的数据或网络传输过来的数据还原为内存中的Java对象


5.自定义类要想实现序列化机制，需要满足：
① 自定义类需要实现接口：Serializable
② 要求自定义类声明一个全局常量： static final long serialVersionUID = 42234234L;
   用来唯一的标识当前的类。
③ 要求自定义类的各个属性也必须是可序列化的。
   > 对于基本数据类型的属性：默认就是可以序列化的
   > 对于引用数据类型的属性：要求实现Serializable接口


6.注意点：
① 如果不声明全局常量serialVersionUID，系统会自动声明生成一个针对于当前类的serialVersionUID。
如果修改此类的话，会导致serialVersionUID变化，进而导致反序列化时，出现InvalidClassException异常。
② 类中的属性如果声明为transient或static，则不会实现序列化。















