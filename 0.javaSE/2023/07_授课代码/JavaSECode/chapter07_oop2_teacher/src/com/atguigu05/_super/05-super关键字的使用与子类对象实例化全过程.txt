
一、super关键字的使用

1. 为什么需要super？

举例1：子类继承父类以后，对父类的方法进行了重写，那么在子类中，是否还可以对父类中被重写的方法进行调用？
可以！

举例2：子类继承父类以后，发现子类和父类中定义了同名的属性，是否可以在子类中区分两个同名的属性？
可以！

如何调用？ 使用super关键字即可。


2. super的理解：父类的


3. super可以调用的结构：属性、方法、构造器

具体的：
3.1 super调用属性、方法

子类继承父类以后，我们就可以在子类的方法或构造器中，调用父类中声明的属性或方法。（满足封装性的前提下）
如何调用呢？需要使用"super."的结构，表示调用父类的属性或方法。
一般情况下，我们可以考虑省略"super."的结构。但是，如果出现子类重写了父类的方法或子父类中出现了同名的属性时，
则必须使用"super."的声明，显式的调用父类被重写的方法或父类中声明的同名的属性。


3.2 super调用构造器
① 子类继承父类时，不会继承父类的构造器。只能通过“super(形参列表)”的方式调用父类指定的构造器。
② 规定：“super(形参列表)”，必须声明在构造器的首行。
③ 我们前面讲过，在构造器的首行可以使用"this(形参列表)"，调用本类中重载的构造器，
   结合②，结论：在构造器的首行，"this(形参列表)" 和 "super(形参列表)"只能二选一。
④ 如果在子类构造器的首行既没有显示调用"this(形参列表)"，也没有显式调用"super(形参列表)"，
  则子类此构造器默认调用"super()"，即调用父类中空参的构造器。
⑤ 由③和④得到结论：子类的任何一个构造器中，要么会调用本类中重载的构造器，要么会调用父类的构造器。
     只能是这两种情况之一。
⑥ 由⑤得到：一个类中声明有n个构造器，最多有n-1个构造器中使用了"this(形参列表)"，
   则剩下的那个一定使用"super(形参列表)"。

--> 我们在通过子类的构造器创建对象时，一定在调用子类构造器的过程中，直接或间接的调用到父类的构造器。
也正因为调用过父类的构造器，我们才会将父类中声明的属性或方法加载到内存中，供子类对象使用。

二、子类对象实例化全过程

代码举例：

class Creature{ //生物类
    //声明属性、方法、构造器
}

class Animal extends Creature{ //动物类

}

class Dog extends Animal{ //狗类

}

class DogTest{
    public static void main(String[] args){
        Dog dog = new Dog();
        dog.xxx();
        dog.yyy = ...;
    }
}

1. 从结果的角度来看：体现为类的继承性

当我们创建子类对象后，子类对象就获取了其父类中声明的所有的属性和方法，在权限允许的情况下，可以直接调用。


2. 从过程的角度来看：

当我们通过子类的构造器创建对象时，子类的构造器一定会直接或间接的调用到其父类的构造器，而其父类的构造器
同样会直接或间接的调用到其父类的父类的构造器，....，直到调用了Object类中的构造器为止。

正因为我们调用过子类所有的父类的构造器，所以我们就会将父类中声明的属性、方法加载到内存中，供子类的对象使用。


问题：在创建子类对象的过程中，一定会调用父类中的构造器吗？ yes!


3. 问题：创建子类的对象时，内存中到底有几个对象？
  就只有一个对象！即为当前new后面构造器对应的类的对象。

4. super的使用场景

    4.1 子类中调用父类被重写的方法
        - 如果子类没有重写父类的方法，只要权限修饰符允许，在子类中完全可以直接调用父类的方法；
        - 如果子类重写了父类的方法，在子类中需要通过`super.`才能调用父类被重写的方法，否则默认调用的子类重写的方法
            总结：

        * **方法前面没有super.和this.**
        * 先从子类找匹配方法，如果没有，再从直接父类找，再没有，继续往上追溯

        * **方法前面有this.**
        * 先从子类找匹配方法，如果没有，再从直接父类找，再没有，继续往上追溯

        * **方法前面有super.**
        * 从当前子类的直接父类找，如果没有，继续往上追溯
    4.2 子类中调用父类中同名的成员变量

        ##### 总结：起点不同（就近原则）

        -变量前面没有super.和this.**
        * 在构造器、代码块、方法中如果出现使用某个变量，先查看是否是当前块声明的`局部变量`，
        * 如果不是局部变量，先从当前执行代码的`本类去找成员变量`
        * 如果从当前执行代码的本类中没有找到，会往上找`父类声明的成员变量`（权限修饰符允许在子类中访问的）

        -变量前面有this.
        * 通过this找成员变量时，先从当前执行代码的==本类去找成员变量== 
        * 如果从当前执行代码的本类中没有找到，会往上找==父类声明的成员变量（==权限修饰符允许在子类中访问的）

        -变量前面super.** 
        * 通过super找成员变量，直接从当前执行代码的直接父类去找成员变量（权限修饰符允许在子类中访问的）
        * 如果直接父类没有，就去父类的父类中找（权限修饰符允许在子类中访问的）

        特别说明：应该避免子类声明和父类重名的成员变量

    4.3 子类构造器中调用父类构造器
        ① 子类继承父类时，不会继承父类的构造器。只能通过“super(形参列表)”的方式调用父类指定的构造器。
        ② 规定：“super(形参列表)”，必须声明在构造器的首行。
        ③ 我们前面讲过，在构造器的首行可以使用"this(形参列表)"，调用本类中重载的构造器，
            结合②，结论：<u>在构造器的首行，"this(形参列表)" 和 "super(形参列表)"只能二选一。
        ④ 如果在子类构造器的首行既没有显示调用"this(形参列表)"，也没有显式调用"super(形参列表)"，
        ​     则子类此构造器默认调用"super()"，即调用父类中空参的构造器。
        ⑤ 由③和④得到结论：子类的任何一个构造器中，要么会调用本类中重载的构造器，要么会调用父类的构造器。
            只能是这两种情况之一。
        ⑥ 由⑤得到：一个类中声明有n个构造器，最多有n-1个构造器中使用了"this(形参列表)"，则剩下的那个一定使用"super(形参列表)"。

        开发中常见错误：
            如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有空参的构造器，则`编译出错`。
验证4.2  
/*
    难点：
    1、通过this找成员变量时，先从当前执行代码的==本类去找成员变量== 
    2、多态的方法动态绑定，多态与属性无关
    3、可以对比验证子类不重写时答案
*/
class F {
    public int age = 30;
    public String name = "F";


    public void show() {
        System.out.println( "F  "+ this.name + this.age);
    }
}

class S extends F {
    public int age = 5;
    public String name = "Z";

    public static void main(String[] args) {
        S s1 = new S();
        s1.show();
        System.out.println("=======================");
        F s2 = new S();//多态 方法是运行时动态绑定确认的，子类重写
        s2.show();
    }

    @Override
    public void show() {
        super.show();//调用父类show() 父类中this.name + this.age 根据就近原则先 从当前执行代码的==本类去找成员变量== ，取父类的同名属性
        System.out.println ("Z " +  this.name + this.age);

    }
}
打印：
F  F30
Z Z5
=======================
F  F30
Z Z5
    
//注释掉子类重写的show方法答案：
// F  F30
// =======================
// F  F30