
抽象类与抽象方法


1. 案例引入
举例1：GeometricObject-Circle-Rectangle

abstract class GeometricObject{  //几何图形

    //求面积 （只能考虑提供方法的声明，而没有办法提供方法体。所以，此方法适合声明为抽象方法）

    //求周长（只能考虑提供方法的声明，而没有办法提供方法体。所以，此方法适合声明为抽象方法）

}

class Circle extends GeometricObject{

    //求面积 （必须重写（或实现）父类中的抽象方法）

    //求周长（必须重写（或实现）父类中的抽象方法）
}

class Rectangle extends GeometricObject{

    //求面积 （必须重写（或实现）父类中的抽象方法）

    //求周长（必须重写（或实现）父类中的抽象方法）
}


举例2：Account-SavingAccount-CheckAcount

abstract class Account{

    double balance;//余额

    //取钱 （声明为抽象方法）

    //存钱 （声明为抽象方法）

}

class SavingAccount extends Account{ //储蓄卡
    //取钱 （需要重写父类中的抽象方法）

    //存钱（需要重写父类中的抽象方法）
}
class CheckAccount extends Account{ //信用卡
    //取钱（需要重写父类中的抽象方法）

    //存钱（需要重写父类中的抽象方法）
}
//....

2. abstract的概念：抽象的

3. abstract可以用来修饰：类、方法

4. 具体的使用：

4.1 abstract修饰类：
    > 此类称为抽象类
    > 抽象类不能实例化。
    > 抽象类中是包含构造器的，因为子类对象实例化时，需要直接或间接的调用到父类的构造器。
    > 抽象类中可以没有抽象方法。反之，抽象方法所在的类，一定是抽象类。


4.2 abstract修饰方法：
    > 此方法即为抽象方法
    > 抽象方法只有方法的声明，没有方法体。
    > 抽象方法其功能是确定的（通过方法的声明即可确定），只是不知道如何具体实现（体现为没有方法体）
    > 子类必须重写父类中的所有的抽象方法之后，方可实例化。否则，此子类仍然是一个抽象类。


5. abstract不能使用的场景：
5.1 abstract 不能修饰哪些结构？
属性、构造器、代码块等。


5.2 abstract 不能与哪些关键字共用？（自洽）

不能用abstract修饰私有方法、静态方法、final的方法、final的类。
> 私有方法不能重写
> 避免静态方法使用类进行调用
> final的方法不能被重写
> final修饰的类不能有子类







