
注解的使用

1. Annotation的理解
> 注解（Annotation）是从`JDK5.0`开始引入，以“`@注解名`”在代码中存在。
> Annotation 可以像修饰符一样被使用，可用于修饰包、类、构造器、方法、成员变量、参数、局部变量的声明。
  还可以添加一些参数值，这些信息被保存在 Annotation 的 “name=value” 对中。
> 注解可以在类编译、运行时进行加载，体现不同的功能。

2. 注解的应用场景：
示例1：生成文档相关的注解
示例2：在编译时进行格式检查(JDK内置的三个基本注解)
示例3：跟踪代码依赖性，实现替代配置文件功能


3. Java基础涉及到的三个常用注解
`@Override`: 限定重写父类方法，该注解只能用于方法
`@Deprecated`: 用于表示所修饰的元素(类，方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择
`@SuppressWarnings`: 抑制编译器警告

4. 自定义注解
以@SuppressWarnings为参照，进行定义即可。

5. 元注解的理解：
元注解：对现有的注解进行解释说明的注解。

讲4个元注解：
（1）@Target：用于描述注解的使用范围
可以通过枚举类型ElementType的10个常量对象来指定
TYPE，METHOD，CONSTRUCTOR，PACKAGE.....

（2）@Retention：用于描述注解的生命周期
可以通过枚举类型RetentionPolicy的3个常量对象来指定
SOURCE（源代码）、CLASS（字节码）、RUNTIME（运行时）
唯有RUNTIME阶段才能被反射读取到。

（3）@Documented：表明这个注解应该被 javadoc工具记录。
（4）@Inherited：允许子类继承父类中的注解




拓展： 元数据。
String name = "Tom";


框架 = 注解 + 反射 + 设计模式
